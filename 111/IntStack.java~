public class IntStack
{
  private IntNode head;
  private int count;
  
  public IntStack()
  {
    head = null;
    count = 0;
  }// end IntStack constructor
  
  public void push(int newValue)
  {
    IntNode aNode = new IntNode(newValue);
    IntNode temp = null;
    
    if(count == 0)
    {
      head = aNode;
      ++count;
    }// end if
    
    else
    {
      temp = head;
      
      while(temp != null)
      {
        temp = temp.getNext();
      }// end while
      
      temp.setNext(aNode);
      ++count;
    }// end else
  }// end push()
  
  public int pop()
  {
    int result = -999;
    IntNode search = null;
    IntNode previous = null;
    
    //result = head.getItem();
    search = head;
    
    while(search != null)
    {
      previous = search;
      search = search.getNext();
    }// end while
    
    result = search.getItem();
    
    previous.setNext(null);
    --count;
    
    
    
/*    if(count == 1)
    {
      head = null;
      --count;
    }// end if
    
    else if(count > 1)
    {
      result = head.getItem();
      head = head.getNext();
      --count;
    }// end else if
*/    
    return result;
  }// end pop()
  
  public static void main(String[] args)
  {
    sLinkedList aList = new sLinkedList();
    IntStack aStack = new IntStack();
    
    aStack.push(1);
    aStack.push(2);
    aStack.push(3);
    System.out.println(aStack.pop());
    System.out.println(aStack.pop());
    
  }// end main
}// end IntStack